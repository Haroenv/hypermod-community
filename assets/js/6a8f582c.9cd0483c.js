"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[5101],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(f,p(p({ref:t},m),{},{components:n})):r.createElement(f,p({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1397:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),p=["components"],i={id:"utils",title:"codeshift/utils",slug:"/utils"},l=void 0,s={unversionedId:"api/utils",id:"api/utils",title:"codeshift/utils",description:"CodeshiftCommunity provides a set of utilities to help perform common codemod operations.",source:"@site/docs/api/codeshift-utils.mdx",sourceDirName:"api",slug:"/utils",permalink:"/docs/utils",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/api/codeshift-utils.mdx",tags:[],version:"current",frontMatter:{id:"utils",title:"codeshift/utils",slug:"/utils"},sidebar:"api",previous:{title:"codeshift/cli",permalink:"/docs/cli"},next:{title:"codeshift/test-utils",permalink:"/docs/test-utils"}},m={},c=[{value:"Installation",id:"installation",level:2},{value:"Nodes",id:"nodes",level:2},{value:"<code>isNodeOfType</code>",id:"isnodeoftype",level:3},{value:"<code>isDecendantOfType</code>",id:"isdecendantoftype",level:3},{value:"Imports",id:"imports",level:2},{value:"<code>hasImportDeclaration</code>",id:"hasimportdeclaration",level:3},{value:"<code>getImportDeclaration</code>",id:"getimportdeclaration",level:3},{value:"<code>removeImportDeclaration</code>",id:"removeimportdeclaration",level:3},{value:"<code>renameImportDeclaration</code>",id:"renameimportdeclaration",level:3},{value:"<code>getDefaultImportSpecifier</code>",id:"getdefaultimportspecifier",level:3},{value:"<code>getDefaultImportSpecifierName</code>",id:"getdefaultimportspecifiername",level:3},{value:"<code>hasDefaultImportSpecifier</code>",id:"hasdefaultimportspecifier",level:3},{value:"<code>removeDefaultImportSpecifier</code>",id:"removedefaultimportspecifier",level:3},{value:"<code>hasImportSpecifier</code>",id:"hasimportspecifier",level:3},{value:"<code>getImportSpecifier</code>",id:"getimportspecifier",level:3},{value:"<code>getImportSpecifierName</code>",id:"getimportspecifiername",level:3},{value:"<code>insertImportSpecifier</code>",id:"insertimportspecifier",level:3},{value:"<code>removeImportSpecifier</code>",id:"removeimportspecifier",level:3},{value:"JSX",id:"jsx",level:2},{value:"<code>getJSXAttributes</code>",id:"getjsxattributes",level:3},{value:"<code>hasJSXAttributes</code>",id:"hasjsxattributes",level:3},{value:"Comments",id:"comments",level:2},{value:"<code>insertCommentBefore</code>",id:"insertcommentbefore",level:3},{value:"<code>insertCommentToStartOfFile</code>",id:"insertcommenttostartoffile",level:3},{value:"Motions",id:"motions",level:2},{value:"<code>applyMotions</code>",id:"applymotions",level:3}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"CodeshiftCommunity provides a set of utilities to help perform common codemod operations."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@codeshift/utils")," is pre-bundled with every codemod that is published to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"the public registry"),",\nso there's no need to install it manually."),(0,o.kt)("p",null,"However, it is also available for use outside of this project and compatible with jscodeshift."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install --save-dev @codeshift/utils")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/utils")),(0,o.kt)("h2",{id:"nodes"},"Nodes"),(0,o.kt)("h3",{id:"isnodeoftype"},(0,o.kt)("inlineCode",{parentName:"h3"},"isNodeOfType")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isNodeOfType(node, type)")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"isNodeOfType")," function uses generics to check if a node of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ASTNode")," is of a specified type.\nIf the check passes, the type of node is narrowed to the expected type, ensuring that the returned type of the function is always correct."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const isImportSpecifier = isNodeOfType(node, 'ImportSpecifier');\n")),(0,o.kt)("h3",{id:"isdecendantoftype"},(0,o.kt)("inlineCode",{parentName:"h3"},"isDecendantOfType")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isDecendantOfType(j, path, type)")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"isDecendantOfType")," function traverses the AST to determind if the given path is a child of a node of the specified type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const isChildOfImportSpecifier = isDecendantOfType(j, path, j.ImportSpecifier);\n")),(0,o.kt)("h2",{id:"imports"},"Imports"),(0,o.kt)("h3",{id:"hasimportdeclaration"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasImportDeclaration")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"hasImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasImportDeclaration } from '@codeshift/utils';\n\nhasImportDeclaration(j, source, 'react'); // True\n")),(0,o.kt)("h3",{id:"getimportdeclaration"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportDeclaration")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Returns an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing 1 or more imports"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportDeclaration } from '@codeshift/utils';\n\ngetImportDeclaration(j, source, 'react');\n")),(0,o.kt)("h3",{id:"removeimportdeclaration"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeImportDeclaration")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"removeImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Removes an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { removeImportDeclaration } from '@codeshift/utils';\n\nremoveImportDeclaration(j, source, 'react');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n")),(0,o.kt)("h3",{id:"renameimportdeclaration"},(0,o.kt)("inlineCode",{parentName:"h3"},"renameImportDeclaration")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"renameImportDeclaration(j, source, sourcePath, newSourcePath)")),(0,o.kt)("p",null,"Renames an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { renameImportDeclaration } from '@codeshift/utils';\n\nrenameImportDeclaration(j, source, 'react', 'preact');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect } from 'preact';\n")),(0,o.kt)("h3",{id:"getdefaultimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds a default import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched default import specifiers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getDefaultImportSpecifier } from '@codeshift/utils';\n\ngetDefaultImportSpecifier(j, source, 'react'); // Collection containing 'React'\n")),(0,o.kt)("h3",{id:"getdefaultimportspecifiername"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultImportSpecifierName")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getDefaultImportSpecifierName(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds a default import specifier and returns its name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string | null"),": Default import's name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getDefaultImportSpecifierName } from '@codeshift/utils';\n\ngetDefaultImportSpecifierName(j, source, 'react'); // Collection containing 'React'\n")),(0,o.kt)("h3",{id:"hasdefaultimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasDefaultImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"hasDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Attempts to find a default import specifier and returns a boolean result"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasDefaultImportSpecifier } from '@codeshift/utils';\n\nhasDefaultImportSpecifier(j, source, 'react'); // True\n")),(0,o.kt)("h3",{id:"removedefaultimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeDefaultImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"removeDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Attempts to remove a default import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { removeDefaultImportSpecifier } from '@codeshift/utils';\n\nremoveDefaultImportSpecifier(j, source, 'React');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"-import React, { useEffect } from 'react';\n+import { useEffect } from 'react';\n")),(0,o.kt)("h3",{id:"hasimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"hasImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Checks for an import import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasImportSpecifier } from '@codeshift/utils';\n\nhasImportSpecifier(j, source, 'react', 'useEffect'); // True\n")),(0,o.kt)("h3",{id:"getimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getImportSpecifier(j, specifier, source)")),(0,o.kt)("p",null,"Finds an import specifier by name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched import specifiers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportSpecifier } from '@codeshift/utils';\n\ngetImportSpecifier(j, source, 'useEffect'); // Collection containing 'useEffect'\n")),(0,o.kt)("h3",{id:"getimportspecifiername"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportSpecifierName")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getImportSpecifierName(j, specifier, source)")),(0,o.kt)("p",null,"Returns the local name of an import. This is useful for cases where an import specifier is potentially aliased."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string")," | null: specifier name or null if not found"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect as foo } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportSpecifierName } from '@codeshift/utils';\n\ngetImportSpecifierName(j, source, 'useEffect', 'react'); // 'foo'\n")),(0,o.kt)("h3",{id:"insertimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"insertImportSpecifier(j, source, specifier)")),(0,o.kt)("p",null,"Inserts an import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { insertImportSpecifier } from '@codeshift/utils';\n\ninsertImportSpecifier(j, source, 'useMemo', 'react'); // Collection containing 'useEffect'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect, useMemo } from 'react';\n")),(0,o.kt)("h3",{id:"removeimportspecifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeImportSpecifier")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"removeImportSpecifier(j, source, specifier)")),(0,o.kt)("p",null,"Removes an import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { removeImportSpecifier } from '@codeshift/utils';\n\nremoveImportSpecifier(j, source, 'useMemo', 'react'); // Collection containing 'useEffect'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect, useMemo } from 'react';\n")),(0,o.kt)("h2",{id:"jsx"},"JSX"),(0,o.kt)("h3",{id:"getjsxattributes"},(0,o.kt)("inlineCode",{parentName:"h3"},"getJSXAttributes")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getJSXAttributes(j, source, attributeName)")),(0,o.kt)("p",null,"Finds a JSX attributeName (aka prop) by name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched jsx attributes"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getJSXAttributes } from '@codeshift/utils';\n\ngetJSXAttributes(j, source, 'primary'); // Collection containing 'primary'\n")),(0,o.kt)("h3",{id:"hasjsxattributes"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasJSXAttributes")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"hasJSXAttributes(j, source, attributeName)")),(0,o.kt)("p",null,"Finds a JSX attributeName (aka prop) by name and returns true if found"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasJSXAttributes } from '@codeshift/utils';\n\nhasJSXAttributes(j, source, 'primary'); // Found!\n")),(0,o.kt)("h2",{id:"comments"},"Comments"),(0,o.kt)("h3",{id:"insertcommentbefore"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertCommentBefore")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"insertCommentBefore(j, source, message, prefix)")),(0,o.kt)("p",null,"Appends a comment before the provided node"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { insertCommentBefore } from '@codeshift/utils';\n\ninsertCommentBefore(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// src/App.js\nimport React from 'react';\n\n// TODO: (@codeshift) This should be removed in favour of mylib\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("h3",{id:"insertcommenttostartoffile"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertCommentToStartOfFile")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"insertCommentToStartOfFile(j, source, message)")),(0,o.kt)("p",null,"Appends a comment to the start of a file"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { insertCommentToStartOfFile } from '@codeshift/utils';\n\ninsertCommentToStartOfFile(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// src/App.js\n// TODO: (Codemod) This should be removed in favour of mylib\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("h2",{id:"motions"},"Motions"),(0,o.kt)("h3",{id:"applymotions"},(0,o.kt)("inlineCode",{parentName:"h3"},"applyMotions")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"applyMotions(j, source, motions)")),(0,o.kt)("p",null,"A helper function to apply an array of motions in sequence."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { applyMotions } from '@codeshift/utils';\nimport { sortImports } from './motions';\n\napplyMotions(j, j(fileInfo.source), [sortImports, removeVar]);\n")))}d.isMDXComponent=!0}}]);