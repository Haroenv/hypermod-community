"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[31],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},c="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),c=p(n),m=o,d=c["".concat(l,".").concat(m)]||c[m]||f[m]||i;return n?r.createElement(d,a(a({ref:e},u),{},{components:n})):r.createElement(d,a({ref:e},u))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[c]="string"==typeof t?t:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2412:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),o=(n(7294),n(3905));const i={id:"test-utils",title:"codeshift/test-utils",slug:"/test-utils"},a=void 0,s={unversionedId:"api/test-utils",id:"api/test-utils",title:"codeshift/test-utils",description:"CodeshiftCommunity provides a set of test utilities to help unit test codemods.",source:"@site/docs/api/codeshift-test-utils.mdx",sourceDirName:"api",slug:"/test-utils",permalink:"/docs/test-utils",draft:!1,editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/api/codeshift-test-utils.mdx",tags:[],version:"current",frontMatter:{id:"test-utils",title:"codeshift/test-utils",slug:"/test-utils"},sidebar:"api",previous:{title:"codeshift/utils",permalink:"/docs/utils"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"API",id:"api",level:2},{value:"<code>applyTransform</code>",id:"applytransform",level:3}],u={toc:p},c="wrapper";function f(t){let{components:e,...n}=t;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"CodeshiftCommunity provides a set of test utilities to help unit test codemods."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@codeshift/test-utils")," is pre-bundled with every codemod that is published to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"the public registry"),",\nso there's no need to install it manually."),(0,o.kt)("p",null,"However, it is also available for use outside of this project and compatible with jscodeshift."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install --save-dev @codeshift/test-utils")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/test-utils")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"applytransform"},(0,o.kt)("inlineCode",{parentName:"h3"},"applyTransform")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"applyTransform(transform, input, options = { parser: 'babel' })")),(0,o.kt)("p",null,"Runs a transform against the provided code and returns the resulting file."),(0,o.kt)("p",null,"We provide this method as opposed to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jscodeshift#unit-testing"},"jscodeshift's test utils")," to maintain jest's skip/only and snapshot features"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Promise<string>"),": Resulting file after transform has been applied"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as transformer from '../transform';\nimport { applyTransform } from '@codeshift/test-utils';\n\nit('should wrap avatar in a tooltip if name is defined', async () => {\n  const result = await applyTransform(\n    transformer,\n    `\n      import Avatar from 'avatar';\n\n      const App = () => {\n        return <Avatar name=\"foo\" />;\n      }\n    `,\n    { parser: 'tsx' },\n  );\n\n  expect(result).toMatchInlineSnapshot(`\n    \"import Tooltip from 'tooltip';\n    import Avatar from 'avatar';\n\n    const App = () => {\n      return <Tooltip content=\\\\\"foo\\\\\"><Avatar name=\\\\\"foo\\\\\" /></Tooltip>;\n    }\"\n  `);\n});\n")))}f.isMDXComponent=!0}}]);